# Lint as: python3
"""Convert departmental data files into a schemaless csv.

If you run this with a PPTS and PTS file specified, it will
dump those into a schemaless csv. If you provide the files
and also set the --diff flag, it will diff against an existing
schemaless csv.
"""

import argparse
from collections import defaultdict
import csv
from csv import DictReader
from datetime import date
import shutil
import sys

from schemaless.sources import PPTS
from schemaless.sources import PTS

csv.field_size_limit(sys.maxsize)


def just_dump(sources, outfile, the_date=None):
    with open(outfile, 'w', newline='\n', encoding='utf-8') as outf:
        writer = csv.writer(outf)
        writer.writerow(['fk', 'source', 'last_updated', 'name', 'value'])
        last_updated = date.today().isoformat()
        if the_date:
            last_updated = the_date.isoformat()

        for source in sources:
            for line in source.yield_records():
                fk = source.foreign_key(line)
                for (key, val) in line.items():
                    writer.writerow([
                            fk, source.NAME, last_updated, key, val.strip()
                    ])


def latest_values(schemaless_file):
    """Collapse the schemaless file into the latest values for each record."""
    records = defaultdict(lambda: defaultdict(str))
    with open(schemaless_file, 'r') as inf:
        reader = DictReader(inf)
        for line in reader:
            records[line['fk']][line['name']] = line['value']
    return records


def dump_and_diff(sources, outfile, schemaless_file, the_date=None):
    records = latest_values(schemaless_file)
    print("Loaded %d records" % len(records))

    shutil.copyfile(schemaless_file, outfile)
    with open(outfile, 'a', newline='\n', encoding='utf-8') as outf:
        writer = csv.writer(outf)
        last_updated = date.today().isoformat()
        if the_date:
            last_updated = the_date.isoformat()

        for source in sources:
            for line in source.yield_records():
                fk = source.foreign_key(line)
                for (key, val) in line.items():
                    if val != records[fk][key]:
                        records[fk][key] = val
                        writer.writerow([
                            fk, source.NAME, last_updated, key, val.strip()
                        ])


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--ppts_file', help='PPTS file', default='')
    parser.add_argument('--pts_file', help='PTS file', default='')
    parser.add_argument('--out_file', help='output file for schemaless csv')

    parser.add_argument(
        '--diff',
        help='A schemaless csv generated by this script, to diff against.',
        default='')
    args = parser.parse_args()

    sources = []
    if args.ppts_file:
        sources.append(PPTS(args.ppts_file))
    if args.pts_file:
        sources.append(PTS(args.pts_file))

    if not args.diff:
        just_dump(sources, args.out_file)
    else:
        dump_and_diff(sources, args.out_file, args.diff)
